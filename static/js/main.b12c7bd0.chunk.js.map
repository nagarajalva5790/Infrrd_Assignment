{"version":3,"sources":["components/EmployeeForm.js","components/ViewEmployees.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeForm","props","useState","currentEmployee","employee","setEmployee","error","setError","useEffect","handleInputChange","event","target","name","value","className","onSubmit","preventDefault","noPattern","RegExp","emailPatter","company_name","email_id","contact_no","designation","length","test","editing","updateEmployee","id","addEmployee","type","onChange","onClick","setEditing","size","round","EmployeeTable","employees","map","key","editRow","window","confirm","deleteEmployee","colSpan","App","initialFormState","setEmployees","setCurrentEmployee","updatedEmployee","filter","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b12c7bd0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Avatar from 'react-avatar';\r\n\r\n//functional component which returns employee form details.\r\nconst EmployeeForm = props => {\r\n    const [employee, setEmployee] = useState(props.currentEmployee);\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(\r\n        () => {\r\n            setEmployee(props.currentEmployee)\r\n        },\r\n        [props]\r\n    )\r\n\r\n    //onchnange method for employee form fields\r\n    const handleInputChange = event => {\r\n        const { name, value } = event.target\r\n        setEmployee({ ...employee, [name]: value })\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"column\">\r\n                    <form\r\n                        onSubmit={event => {\r\n                            event.preventDefault();\r\n                            const noPattern = new RegExp(/^[0-9\\b]+$/);\r\n                            const emailPatter = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n                            if (!employee.name || !employee.company_name || !employee.email_id || !employee.contact_no || !employee.designation) return\r\n                            else if (employee.name.length < 5) {\r\n                                setError('Name must be more than 3 characters!');\r\n                                return\r\n                            } else if (!noPattern.test(employee.contact_no) || employee.contact_no.length !== 10) {\r\n                                setError('Please enter valid phone number!');\r\n                                return\r\n                            } else if (!emailPatter.test(employee.email_id)) {\r\n                                setError('Please enter valid email address!');\r\n                                return\r\n                            }\r\n\r\n                            if (props.editing) {\r\n                                props.updateEmployee(employee.id, employee)\r\n\r\n                            } else {\r\n                                props.addEmployee(employee)\r\n                            }\r\n                            setError('');\r\n                        }}\r\n                    >\r\n                        <label>Employee Name</label>\r\n                        <input type=\"text\" name=\"name\" value={employee.name} onChange={handleInputChange} />\r\n                        <label>Company Name</label>\r\n                        <input type=\"text\" name=\"company_name\" value={employee.company_name} onChange={handleInputChange} />\r\n                        <label>Email ID</label>\r\n                        <input type=\"text\" name=\"email_id\" value={employee.email_id} onChange={handleInputChange} />\r\n                        <label>Contact No.</label>\r\n                        <input type=\"text\" name=\"contact_no\" value={employee.contact_no} onChange={handleInputChange} />\r\n                        <label>Designation</label>\r\n                        <select name=\"designation\" value={employee.designation} onChange={handleInputChange} >\r\n                            <option value={employee.designation}>{employee.designation}</option>\r\n                            <option value=\"CEO\">CEO</option>\r\n                            <option value=\"CTO\">CTO</option>\r\n                            <option value=\"CFO\">CFO</option>\r\n                            <option value=\"Manager\">Manager</option>\r\n                            <option value=\"Engineer\">Engineer</option>\r\n                        </select>\r\n                        {error.length ? <span className='error'>{error}</span> : null}\r\n                        <br />\r\n                        <button className=\"button submitbtn\">Submit</button>\r\n                        <button onClick={() => props.setEditing(false)} className=\"button deletebtn\">\r\n                            Cancel\r\n            </button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"column1\">\r\n                    <Avatar name={employee.name} size=\"250\" round=\"20px\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmployeeForm\r\n","import React from 'react';\r\nimport Avatar from 'react-avatar';\r\n\r\n//functional component which returns employee details in table format\r\nconst EmployeeTable = props => (\r\n    <div className=\"container\">\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Profile</th>\r\n                    <th>Company Name</th>\r\n                    <th>Email ID</th>\r\n                    <th>Contact No.</th>\r\n                    <th>Designation</th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.employees.length > 0 ? (\r\n                    props.employees.map(employee => (\r\n                        <tr key={employee.id}>\r\n                            <td>{employee.name}</td>\r\n                            <th><Avatar name={employee.name} size=\"50\" round={true} /></th>\r\n                            <td>{employee.company_name}</td>\r\n                            <td>{employee.email_id}</td>\r\n                            <td>{employee.contact_no}</td>\r\n                            <td>{employee.designation}</td>\r\n                            <td>\r\n                                <button\r\n                                    onClick={() => {\r\n                                        props.editRow(employee)\r\n                                    }}\r\n                                    className=\"button submitbtn\"\r\n                                >\r\n                                    Edit\r\n              </button>\r\n                                <button\r\n                                    onClick={() => { if (window.confirm('Are you sure to delete this record?')) { props.deleteEmployee(employee.id) }; }}\r\n                                    className=\"button deletebtn\"\r\n                                >\r\n                                    Delete\r\n              </button>\r\n                            </td>\r\n                        </tr>\r\n                    ))\r\n                ) : (\r\n                        <tr>\r\n                            <td colSpan={3}>No employees</td>\r\n                        </tr>\r\n                    )}\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n)\r\n\r\nexport default EmployeeTable\r\n","import React, { useState, Fragment} from 'react'\nimport EmployeeForm from './components/EmployeeForm';\nimport EmployeeTable from './components/ViewEmployees';\n\nconst App = () => {\n\t// JSON Data for the employee managaement form\n\tconst employeesData = [\n\t\t{ id: 1, name: 'Rohit Sharma', company_name: 'MI', email_id: 'abc@emp.net', contact_no: '9988776655', designation: 'CEO'},\n\t\t{ id: 2, name: 'MS Dhoni', company_name: 'CSK', email_id: 'mno@emp.net', contact_no: '9988776644', designation: 'CFO'},\n\t\t{ id: 3, name: 'Viral Kohli', company_name: 'RCB', email_id: 'pqr@emp.net', contact_no: '9988776633', designation: 'CTO'},\n\t]\n\n\tconst initialFormState = { id: null, name: '', company_name: '', email_id: '', contact_no: '', designation: ''}\n\t\t\n\n\t// Setting state\n\tconst [ employees, setEmployees ] = useState(employeesData)\n\tconst [ currentEmployee, setCurrentEmployee ] = useState(initialFormState)\n\tconst [ editing, setEditing ] = useState(false)\n\n\t// CRUD operations\n\tconst addEmployee = employee => {\n\t\temployee.id = employees.length + 1\n    setEmployees([ ...employees, employee ])\n    setCurrentEmployee(initialFormState);\n\t}\n\n\tconst deleteEmployee = id => {\n\t\tsetEditing(false);\n\t\tsetEmployees(employees.filter(employee => employee.id !== id))\n\t}\n\n\tconst updateEmployee = (id, updatedEmployee) => {\n\t\tsetEditing(false);\n    setEmployees(employees.map(employee => (employee.id === id ? updatedEmployee : employee)));\n    setCurrentEmployee(initialFormState);\n\t}\n\n\tconst editRow = employee => {\n\t\tsetEditing(true);\n    setCurrentEmployee({ id: employee.id, name: employee.name, company_name: employee.company_name, email_id: employee.email_id, contact_no: employee.contact_no, designation: employee.designation})\n\n  }\n  //CORD Operation Method Ends here\n\n  //Container UI Design \n\treturn (\n\t\t<Fragment>\n        <h1>Employee Management</h1>\n        <EmployeeForm\n\t\t\t\t\t\t\t\tediting={editing}\n\t\t\t\t\t\t\t\tsetEditing={setEditing}\n\t\t\t\t\t\t\t\tcurrentEmployee={currentEmployee}\n                updateEmployee={updateEmployee}\n                addEmployee={addEmployee}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t<h2>View Employees</h2>\n\t\t\t\t\t<EmployeeTable employees={employees} editRow={editRow} deleteEmployee={deleteEmployee} />\n\t\t\t</Fragment>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}